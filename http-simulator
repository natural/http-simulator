#!/usr/bin/env python
""" Simulate HTTP responses with HTTP requests.

See README.md and LICENSE files in this directory.

"""
import argparse
import http.server
import json
import os
import sqlite3
import sys
import threading
import time
import urllib.parse


# logger, potentially overwritten by config
#
def log(*value, sep=' ', end='\n', file=sys.stderr, flush=False):
    print('http-simulator:', *value, sep=sep, end=end, file=file, flush=flush)


# http handler for serving up simulated routes
#
class SimulatorHandler(http.server.BaseHTTPRequestHandler):
    def log_message(self, fmt, *args):
        log(fmt % args)

    def lookup(self):
        db = self.server.conf.db_conn
        url = urllib.parse.urlparse(self.path)

        select = queries.route
        args = [self.command, url.path]

        # if self.read_match_headers():
        #     select = queries.route_qs
        #     args.append(url.query)

        return list(db.execute(select, args))


    # can mutate
    select_header_defaults = ['Content-Type', 'Content-Length', 'Location']

    def select_headers(self, all_headers, value_lookup):
        save = []
        presets = {
            'default': lambda v: v in self.select_header_defaults,
            'always':  lambda v: True,
            'all-nox': lambda v: not v.startswith('X-'),
            'xs': lambda v: v.startswith('X-'),
            }

        for which in value_lookup.get('headers', ['default']):
            match = lambda v: v == which
            pred = presets.get(which, match)

            for pair in [(k, v) for k, v in all_headers.items() if pred(k)]:
                save.append(pair)

        return save

    def do(self):
        sim_set = self.headers.get('x-simulator-set', '').replace(',', '&')
        set_values = urllib.parse.parse_qs(sim_set)
        db = self.server.conf.db_conn

        # set the router to match
        if set_values:
            headers = self.headers
            content_len = int(headers.get('content-length', 0))
            body = self.rfile.read(content_len)
            if len(body) == 0 and headers.get('content-length', None) is None:
                headers['Content-Length'] = '0'
            headers = self.select_headers(headers, set_values)
            headers = json.dumps(headers)

            status = int(set_values.get('status', [200])[0])
            url = urllib.parse.urlparse(self.path)

            if not self.server.conf.read_only:
                c = db.cursor()
                c.execute(queries.clear, (self.command, url.path, url.query))
                c.execute(queries.insert, (status, self.command, url.path, url.query, headers, body))
                db.commit()
                self.send_response(205)
                self.end_headers()
            else:
                self.send_response(403)
                self.end_headers()
                self.wfile.write(b'Simulator is read-only.')
            return

        # serve instead
        replay = self.lookup()
        if replay:
            status, method, path, qs, headers, body = record = replay[0]

            self.send_response(int(status))
            try:
                headers = json.loads(headers)
            except:
                headers = []
            for k, v in headers:
                self.send_header(k, v)
            self.end_headers()
            if body:
                self.wfile.write(body)
            return

        # no set, no serve, no soup for you
        self.send_response(404)
        self.end_headers()
        return


    do_ANY = do_DELETE = do_GET = do_HEAD = do_PATCH = do_POST = do_PUT = do_TRACE = do


# configures and runs an http server with our handler
#
def run_server(conf):
    handler = SimulatorHandler
    host = conf.host
    port = conf.port

    httpd = http.server.HTTPServer((host, port), handler)
    httpd.conf = conf

    log('serving on {}:{}'.format(host if host else '*', port))
    httpd.serve_forever()
    return 0


# restarts this script when it changes
#
def restarter():
    mod_time = lambda: os.stat(__file__).st_mtime
    first = mod_time()
    while True:
        time.sleep(1)
        now = mod_time()
        if now != first:
            log('restart - mod time was {} now {}'.format(first, now))
            p = sys.executable
            os.execl(p, p, *sys.argv)


# sql bits grouped in a class
#
class queries:
    create = """
    CREATE TABLE IF NOT EXISTS sim_routes (
        status INT NOT NULL,
        method TEXT NOT NULL,
        path TEXT NOT NULL,
        query TEXT NOT NULL,
        headers TEXT,
        body BLOB
    );
    """

    insert = """
    INSERT INTO sim_routes (status, method, path, query, headers, body)
    VALUES (?, ?, ?, ?, ?, ?);
    """

    route = """
    SELECT * FROM sim_routes WHERE method = ? AND path = ?;
    """

    route_qs = """
    SELECT * FROM sim_routes WHERE method = ? AND path = ? AND query = ?;
    """

    clear = """
    DELETE FROM sim_routes WHERE method = ? AND path = ? AND query = ?;
    """


# create the initial table, log count of existing records
def init_db(db):
    db.execute(queries.create)
    log('record count: {}'.format(list(db.execute('select * from sim_routes'))))


# reads and validates command line args, then configures the script
# environment; returns the augmented configuration
#
def config(args):
    mem_db = ':memory:'
    fmt_cls = argparse.ArgumentDefaultsHelpFormatter
    desc = 'Serve HTTP responses simulated with HTTP requests.'

    parser = argparse.ArgumentParser(description=desc, formatter_class=fmt_cls)
    parser.add_argument('-b', '--bind', dest='bind', default='*:8000',
                            help='bind to host:port')
    parser.add_argument('-d', '--database', dest='db', default=mem_db,
                            help='sqlite3 database filename')
    parser.add_argument('-q', '--quiet', dest='quiet', action='store_true',
                            help='quiet output')
    parser.add_argument('-r', '--read-only', dest='read_only', action='store_true',
                            help='do not write to the database')
    parser.add_argument('-w', '--watch', dest='watch', action='store_true',
                            help='watch the script for changes and restart')
    global log
    log_err = log
    conf = parser.parse_args(args)

    if conf.quiet:
        log = lambda *a, **b: None

    try:
        host, port = conf.bind.split(':')
        if host == '*':
            host = ''
        port = int(port)
    except:
        log_err('invalid host:port for bind')
        sys.exit(1)
    else:
        conf.host = host
        conf.port = port

    if conf.db == mem_db and conf.read_only:
        log_err('read only memory only db will not do anything; exiting.')
        sys.exit(2)

    try:
        conf.db_conn = sqlite3.connect(conf.db)
    except Exception as exc:
        log_err('failed to connect to database:', exc)
        sys.exit(3)
    else:
        init_db(conf.db_conn)

    if conf.watch:
        restarter_thread = threading.Thread(target=restarter, daemon=True)
        restarter_thread.start()

    return conf


if __name__ == '__main__':
    try:
        sys.exit(run_server(config(sys.argv[1:])))
    except KeyboardInterrupt:
        pass
